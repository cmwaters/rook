// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: matchmaker/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryAllFindGameRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFindGameRequest) Reset()         { *m = QueryAllFindGameRequest{} }
func (m *QueryAllFindGameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFindGameRequest) ProtoMessage()    {}
func (*QueryAllFindGameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_812ae2dcfe4e1d07, []int{0}
}
func (m *QueryAllFindGameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFindGameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFindGameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFindGameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFindGameRequest.Merge(m, src)
}
func (m *QueryAllFindGameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFindGameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFindGameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFindGameRequest proto.InternalMessageInfo

func (m *QueryAllFindGameRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFindGameResponse struct {
	FindGame   []*MsgFindGame      `protobuf:"bytes,1,rep,name=findGame,proto3" json:"findGame,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFindGameResponse) Reset()         { *m = QueryAllFindGameResponse{} }
func (m *QueryAllFindGameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFindGameResponse) ProtoMessage()    {}
func (*QueryAllFindGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_812ae2dcfe4e1d07, []int{1}
}
func (m *QueryAllFindGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFindGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFindGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFindGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFindGameResponse.Merge(m, src)
}
func (m *QueryAllFindGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFindGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFindGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFindGameResponse proto.InternalMessageInfo

func (m *QueryAllFindGameResponse) GetFindGame() []*MsgFindGame {
	if m != nil {
		return m.FindGame
	}
	return nil
}

func (m *QueryAllFindGameResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAllFindGameRequest)(nil), "rook.matchmaker.QueryAllFindGameRequest")
	proto.RegisterType((*QueryAllFindGameResponse)(nil), "rook.matchmaker.QueryAllFindGameResponse")
}

func init() { proto.RegisterFile("matchmaker/querier.proto", fileDescriptor_812ae2dcfe4e1d07) }

var fileDescriptor_812ae2dcfe4e1d07 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0x10, 0x08, 0x39, 0x03, 0x92, 0x17, 0x42, 0x84, 0xac, 0xaa, 0x03, 0x04, 0x90,
	0x6c, 0x35, 0x2c, 0xac, 0x20, 0xd1, 0x4e, 0x48, 0xd0, 0x91, 0xcd, 0x09, 0x26, 0x8d, 0x52, 0xc7,
	0xa9, 0xed, 0x00, 0x7d, 0x0b, 0x5e, 0x80, 0xf7, 0x61, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x49,
	0xfa, 0x13, 0xa8, 0x10, 0x9d, 0xef, 0x3d, 0xe7, 0xfb, 0xec, 0x0b, 0x1d, 0xc1, 0x4c, 0x38, 0x12,
	0x2c, 0xe1, 0x8a, 0x4e, 0x72, 0xae, 0x62, 0xae, 0x48, 0xa6, 0xa4, 0x91, 0x68, 0x5f, 0x49, 0x99,
	0x90, 0xd5, 0xd8, 0x3d, 0x0b, 0xa5, 0x16, 0x52, 0xd3, 0x80, 0x69, 0x5e, 0xef, 0x4e, 0xe9, 0x73,
	0x2f, 0xe0, 0x86, 0xf5, 0x68, 0xc6, 0xa2, 0x38, 0x65, 0x26, 0x96, 0x69, 0x13, 0x76, 0x0f, 0x5b,
	0xb5, 0x4f, 0x71, 0xfa, 0x38, 0x60, 0x82, 0x37, 0xa3, 0x2e, 0x83, 0x07, 0xf7, 0x55, 0xf8, 0x6a,
	0x3c, 0xee, 0xcf, 0x27, 0x43, 0x3e, 0xc9, 0xb9, 0x36, 0xa8, 0x0f, 0xe1, 0xaa, 0xc9, 0x01, 0x1d,
	0xe0, 0xd9, 0xfe, 0x31, 0x69, 0xb0, 0xa4, 0xc2, 0x92, 0x1a, 0x4b, 0xe6, 0x58, 0x72, 0xc7, 0xa2,
	0x45, 0x76, 0xd8, 0x4a, 0x76, 0xdf, 0x01, 0x74, 0xd6, 0x19, 0x3a, 0x93, 0xa9, 0xe6, 0xe8, 0x12,
	0xee, 0x2d, 0x8c, 0x1c, 0xd0, 0xd9, 0xf6, 0x6c, 0xff, 0x88, 0xfc, 0x7a, 0x2a, 0xb9, 0xd5, 0xd1,
	0x32, 0xb7, 0xdc, 0x46, 0x83, 0x1f, 0x7a, 0x5b, 0xb5, 0xde, 0xc9, 0xbf, 0x7a, 0x0d, 0xb6, 0xed,
	0xe7, 0x27, 0x70, 0xa7, 0xd6, 0x43, 0x01, 0xb4, 0x5b, 0x8a, 0xc8, 0x5b, 0x13, 0xf9, 0xe3, 0xa7,
	0xdc, 0xd3, 0x0d, 0x36, 0x1b, 0xf0, 0xf5, 0xcd, 0x47, 0x81, 0xc1, 0xac, 0xc0, 0xe0, 0xab, 0xc0,
	0xe0, 0xad, 0xc4, 0xd6, 0xac, 0xc4, 0xd6, 0x67, 0x89, 0xad, 0x87, 0xf3, 0x28, 0x36, 0xa3, 0x3c,
	0x20, 0xa1, 0x14, 0x34, 0x14, 0x2f, 0xcc, 0x70, 0xa5, 0x69, 0xd5, 0x4b, 0x5f, 0x69, 0xeb, 0x7e,
	0x66, 0x9a, 0x71, 0x1d, 0xec, 0xd6, 0xd7, 0xbb, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x62, 0x12,
	0x2d, 0x1e, 0x31, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	AllFindGame(ctx context.Context, in *QueryAllFindGameRequest, opts ...grpc.CallOption) (*QueryAllFindGameResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllFindGame(ctx context.Context, in *QueryAllFindGameRequest, opts ...grpc.CallOption) (*QueryAllFindGameResponse, error) {
	out := new(QueryAllFindGameResponse)
	err := c.cc.Invoke(ctx, "/rook.matchmaker.Query/AllFindGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	AllFindGame(context.Context, *QueryAllFindGameRequest) (*QueryAllFindGameResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllFindGame(ctx context.Context, req *QueryAllFindGameRequest) (*QueryAllFindGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFindGame not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllFindGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFindGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFindGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rook.matchmaker.Query/AllFindGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFindGame(ctx, req.(*QueryAllFindGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rook.matchmaker.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllFindGame",
			Handler:    _Query_AllFindGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaker/querier.proto",
}

func (m *QueryAllFindGameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFindGameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFindGameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFindGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFindGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFindGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FindGame) > 0 {
		for iNdEx := len(m.FindGame) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FindGame[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllFindGameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllFindGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FindGame) > 0 {
		for _, e := range m.FindGame {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllFindGameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFindGameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFindGameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFindGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFindGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFindGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindGame = append(m.FindGame, &MsgFindGame{})
			if err := m.FindGame[len(m.FindGame)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
