// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: matchmaker/find.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgFind struct {
	Id         string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	ContractId uint64                                        `protobuf:"varint,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Config     []byte                                        `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	SearchOpts *SearchOpts                                   `protobuf:"bytes,5,opt,name=search_opts,json=searchOpts,proto3" json:"search_opts,omitempty"`
}

func (m *MsgFind) Reset()         { *m = MsgFind{} }
func (m *MsgFind) String() string { return proto.CompactTextString(m) }
func (*MsgFind) ProtoMessage()    {}
func (*MsgFind) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0e5424f42fe23a, []int{0}
}
func (m *MsgFind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFind.Merge(m, src)
}
func (m *MsgFind) XXX_Size() int {
	return m.Size()
}
func (m *MsgFind) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFind.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFind proto.InternalMessageInfo

func (m *MsgFind) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgFind) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgFind) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *MsgFind) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *MsgFind) GetSearchOpts() *SearchOpts {
	if m != nil {
		return m.SearchOpts
	}
	return nil
}

type SearchOpts struct {
	MinCapacity  uint64 `protobuf:"varint,1,opt,name=min_capacity,json=minCapacity,proto3" json:"min_capacity,omitempty"`
	MaxCapacity  uint64 `protobuf:"varint,2,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	SeekDuration uint64 `protobuf:"varint,3,opt,name=seek_duration,json=seekDuration,proto3" json:"seek_duration,omitempty"`
}

func (m *SearchOpts) Reset()         { *m = SearchOpts{} }
func (m *SearchOpts) String() string { return proto.CompactTextString(m) }
func (*SearchOpts) ProtoMessage()    {}
func (*SearchOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0e5424f42fe23a, []int{1}
}
func (m *SearchOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchOpts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchOpts.Merge(m, src)
}
func (m *SearchOpts) XXX_Size() int {
	return m.Size()
}
func (m *SearchOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchOpts.DiscardUnknown(m)
}

var xxx_messageInfo_SearchOpts proto.InternalMessageInfo

func (m *SearchOpts) GetMinCapacity() uint64 {
	if m != nil {
		return m.MinCapacity
	}
	return 0
}

func (m *SearchOpts) GetMaxCapacity() uint64 {
	if m != nil {
		return m.MaxCapacity
	}
	return 0
}

func (m *SearchOpts) GetSeekDuration() uint64 {
	if m != nil {
		return m.SeekDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgFind)(nil), "rook.matchmaker.MsgFind")
	proto.RegisterType((*SearchOpts)(nil), "rook.matchmaker.SearchOpts")
}

func init() { proto.RegisterFile("matchmaker/find.proto", fileDescriptor_ff0e5424f42fe23a) }

var fileDescriptor_ff0e5424f42fe23a = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4a, 0xeb, 0x40,
	0x18, 0xc5, 0x3b, 0xb9, 0xbd, 0x2d, 0x77, 0xd2, 0xab, 0x10, 0x54, 0x82, 0x42, 0x1a, 0xeb, 0x26,
	0x20, 0x4d, 0x50, 0xb7, 0x6e, 0x5a, 0xff, 0x80, 0x88, 0x08, 0x71, 0xe7, 0x26, 0x4c, 0x67, 0xa6,
	0xe9, 0x10, 0x92, 0x2f, 0xcc, 0x4c, 0x69, 0xfb, 0x16, 0x3e, 0x96, 0xcb, 0x2e, 0xdd, 0x28, 0xd2,
	0xbe, 0x85, 0x2b, 0x49, 0x4c, 0xff, 0xe0, 0x6a, 0xbe, 0x39, 0xe7, 0xc7, 0x0c, 0xe7, 0x3b, 0x78,
	0x3f, 0x25, 0x9a, 0x8e, 0x52, 0x92, 0x70, 0x19, 0x0c, 0x45, 0xc6, 0xfc, 0x5c, 0x82, 0x06, 0x6b,
	0x57, 0x02, 0x24, 0xfe, 0xc6, 0x3b, 0xdc, 0x8b, 0x21, 0x86, 0xd2, 0x0b, 0x8a, 0xe9, 0x07, 0xeb,
	0xbc, 0x23, 0xdc, 0x7c, 0x50, 0xf1, 0xad, 0xc8, 0x98, 0xb5, 0x83, 0x0d, 0xc1, 0x6c, 0xe4, 0x22,
	0xef, 0x5f, 0x68, 0x08, 0x66, 0xdd, 0xe3, 0x26, 0x95, 0x9c, 0x68, 0x90, 0xb6, 0xe1, 0x22, 0xaf,
	0xd5, 0x3f, 0xfb, 0xfa, 0x68, 0x77, 0x63, 0xa1, 0x47, 0xe3, 0x81, 0x4f, 0x21, 0x0d, 0x28, 0xa8,
	0x14, 0x54, 0x75, 0x74, 0x15, 0x4b, 0x02, 0x3d, 0xcb, 0xb9, 0xf2, 0x7b, 0x94, 0xf6, 0x18, 0x93,
	0x5c, 0xa9, 0x70, 0xf5, 0x82, 0xd5, 0xc6, 0x26, 0x85, 0x4c, 0x4b, 0x42, 0x75, 0x24, 0x98, 0xfd,
	0xc7, 0x45, 0x5e, 0x3d, 0xc4, 0x2b, 0xe9, 0x8e, 0x59, 0x07, 0xb8, 0x41, 0x21, 0x1b, 0x8a, 0xd8,
	0xae, 0x17, 0x9f, 0x85, 0xd5, 0xcd, 0xba, 0xc4, 0xa6, 0xe2, 0x44, 0xd2, 0x51, 0x04, 0xb9, 0x56,
	0xf6, 0x5f, 0x17, 0x79, 0xe6, 0xf9, 0x91, 0xff, 0x2b, 0x9e, 0xff, 0x54, 0x32, 0x8f, 0xb9, 0x56,
	0x21, 0x56, 0xeb, 0xb9, 0x33, 0xc1, 0x78, 0xe3, 0x58, 0xc7, 0xb8, 0x95, 0x8a, 0x2c, 0xa2, 0x24,
	0x27, 0x54, 0xe8, 0x59, 0x99, 0xb5, 0x1e, 0x9a, 0xa9, 0xc8, 0xae, 0x2a, 0xa9, 0x44, 0xc8, 0x74,
	0x83, 0x18, 0x15, 0x42, 0xa6, 0x6b, 0xe4, 0x04, 0xff, 0x57, 0x9c, 0x27, 0x11, 0x1b, 0x4b, 0xa2,
	0x05, 0x64, 0x55, 0x98, 0x56, 0x21, 0x5e, 0x57, 0x5a, 0xff, 0xe6, 0x75, 0xe1, 0xa0, 0xf9, 0xc2,
	0x41, 0x9f, 0x0b, 0x07, 0xbd, 0x2c, 0x9d, 0xda, 0x7c, 0xe9, 0xd4, 0xde, 0x96, 0x4e, 0xed, 0xf9,
	0x74, 0x7b, 0x83, 0xe9, 0x84, 0x68, 0x2e, 0x55, 0x50, 0xc4, 0x09, 0xa6, 0xc1, 0x56, 0x97, 0xe5,
	0x2a, 0x07, 0x8d, 0xb2, 0xa6, 0x8b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x22, 0x1f, 0xe4,
	0xe6, 0x01, 0x00, 0x00,
}

func (m *MsgFind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFind) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFind) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchOpts != nil {
		{
			size, err := m.SearchOpts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintFind(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x22
	}
	if m.ContractId != 0 {
		i = encodeVarintFind(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintFind(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFind(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchOpts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchOpts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeekDuration != 0 {
		i = encodeVarintFind(dAtA, i, uint64(m.SeekDuration))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxCapacity != 0 {
		i = encodeVarintFind(dAtA, i, uint64(m.MaxCapacity))
		i--
		dAtA[i] = 0x10
	}
	if m.MinCapacity != 0 {
		i = encodeVarintFind(dAtA, i, uint64(m.MinCapacity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFind(dAtA []byte, offset int, v uint64) int {
	offset -= sovFind(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFind) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFind(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovFind(uint64(l))
	}
	if m.ContractId != 0 {
		n += 1 + sovFind(uint64(m.ContractId))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovFind(uint64(l))
	}
	if m.SearchOpts != nil {
		l = m.SearchOpts.Size()
		n += 1 + l + sovFind(uint64(l))
	}
	return n
}

func (m *SearchOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinCapacity != 0 {
		n += 1 + sovFind(uint64(m.MinCapacity))
	}
	if m.MaxCapacity != 0 {
		n += 1 + sovFind(uint64(m.MaxCapacity))
	}
	if m.SeekDuration != 0 {
		n += 1 + sovFind(uint64(m.SeekDuration))
	}
	return n
}

func sovFind(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFind(x uint64) (n int) {
	return sovFind(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFind
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFind
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFind
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchOpts == nil {
				m.SearchOpts = &SearchOpts{}
			}
			if err := m.SearchOpts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFind
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCapacity", wireType)
			}
			m.MinCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCapacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCapacity", wireType)
			}
			m.MaxCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCapacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeekDuration", wireType)
			}
			m.SeekDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeekDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFind
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFind(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFind
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFind
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFind
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFind
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFind        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFind          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFind = fmt.Errorf("proto: unexpected end of group")
)
