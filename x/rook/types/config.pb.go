// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rook/config.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameConfig struct {
	Initial      *InitializationConfig  `protobuf:"bytes,1,opt,name=initial,proto3" json:"initial,omitempty"`
	Map          *MapConfig             `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
	Production   *ProductionRatesConfig `protobuf:"bytes,3,opt,name=production,proto3" json:"production,omitempty"`
	Construction *SettlementCostsConfig `protobuf:"bytes,4,opt,name=construction,proto3" json:"construction,omitempty"`
}

func (m *GameConfig) Reset()         { *m = GameConfig{} }
func (m *GameConfig) String() string { return proto.CompactTextString(m) }
func (*GameConfig) ProtoMessage()    {}
func (*GameConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd723d25700bbf6, []int{0}
}
func (m *GameConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConfig.Merge(m, src)
}
func (m *GameConfig) XXX_Size() int {
	return m.Size()
}
func (m *GameConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GameConfig proto.InternalMessageInfo

func (m *GameConfig) GetInitial() *InitializationConfig {
	if m != nil {
		return m.Initial
	}
	return nil
}

func (m *GameConfig) GetMap() *MapConfig {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *GameConfig) GetProduction() *ProductionRatesConfig {
	if m != nil {
		return m.Production
	}
	return nil
}

func (m *GameConfig) GetConstruction() *SettlementCostsConfig {
	if m != nil {
		return m.Construction
	}
	return nil
}

type MapConfig struct {
	Width            uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height           uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Seed             int64  `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	MountainsDensity uint32 `protobuf:"varint,4,opt,name=mountains_density,json=mountainsDensity,proto3" json:"mountains_density,omitempty"`
	ForestDensity    uint32 `protobuf:"varint,5,opt,name=forest_density,json=forestDensity,proto3" json:"forest_density,omitempty"`
	LakeDensity      uint32 `protobuf:"varint,6,opt,name=lake_density,json=lakeDensity,proto3" json:"lake_density,omitempty"`
	PlainsDensity    uint32 `protobuf:"varint,7,opt,name=plains_density,json=plainsDensity,proto3" json:"plains_density,omitempty"`
	LineOfSight      uint32 `protobuf:"varint,8,opt,name=line_of_sight,json=lineOfSight,proto3" json:"line_of_sight,omitempty"`
	RookLineOfSight  uint32 `protobuf:"varint,9,opt,name=rook_line_of_sight,json=rookLineOfSight,proto3" json:"rook_line_of_sight,omitempty"`
}

func (m *MapConfig) Reset()         { *m = MapConfig{} }
func (m *MapConfig) String() string { return proto.CompactTextString(m) }
func (*MapConfig) ProtoMessage()    {}
func (*MapConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd723d25700bbf6, []int{1}
}
func (m *MapConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapConfig.Merge(m, src)
}
func (m *MapConfig) XXX_Size() int {
	return m.Size()
}
func (m *MapConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MapConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MapConfig proto.InternalMessageInfo

func (m *MapConfig) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *MapConfig) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MapConfig) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *MapConfig) GetMountainsDensity() uint32 {
	if m != nil {
		return m.MountainsDensity
	}
	return 0
}

func (m *MapConfig) GetForestDensity() uint32 {
	if m != nil {
		return m.ForestDensity
	}
	return 0
}

func (m *MapConfig) GetLakeDensity() uint32 {
	if m != nil {
		return m.LakeDensity
	}
	return 0
}

func (m *MapConfig) GetPlainsDensity() uint32 {
	if m != nil {
		return m.PlainsDensity
	}
	return 0
}

func (m *MapConfig) GetLineOfSight() uint32 {
	if m != nil {
		return m.LineOfSight
	}
	return 0
}

func (m *MapConfig) GetRookLineOfSight() uint32 {
	if m != nil {
		return m.RookLineOfSight
	}
	return 0
}

type ProductionRatesConfig struct {
	Town       uint32 `protobuf:"varint,1,opt,name=town,proto3" json:"town,omitempty"`
	City       uint32 `protobuf:"varint,2,opt,name=city,proto3" json:"city,omitempty"`
	Lumbermill uint32 `protobuf:"varint,3,opt,name=lumbermill,proto3" json:"lumbermill,omitempty"`
	Quarry     uint32 `protobuf:"varint,4,opt,name=quarry,proto3" json:"quarry,omitempty"`
	Farm       uint32 `protobuf:"varint,5,opt,name=farm,proto3" json:"farm,omitempty"`
}

func (m *ProductionRatesConfig) Reset()         { *m = ProductionRatesConfig{} }
func (m *ProductionRatesConfig) String() string { return proto.CompactTextString(m) }
func (*ProductionRatesConfig) ProtoMessage()    {}
func (*ProductionRatesConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd723d25700bbf6, []int{2}
}
func (m *ProductionRatesConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductionRatesConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductionRatesConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductionRatesConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductionRatesConfig.Merge(m, src)
}
func (m *ProductionRatesConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProductionRatesConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductionRatesConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProductionRatesConfig proto.InternalMessageInfo

func (m *ProductionRatesConfig) GetTown() uint32 {
	if m != nil {
		return m.Town
	}
	return 0
}

func (m *ProductionRatesConfig) GetCity() uint32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *ProductionRatesConfig) GetLumbermill() uint32 {
	if m != nil {
		return m.Lumbermill
	}
	return 0
}

func (m *ProductionRatesConfig) GetQuarry() uint32 {
	if m != nil {
		return m.Quarry
	}
	return 0
}

func (m *ProductionRatesConfig) GetFarm() uint32 {
	if m != nil {
		return m.Farm
	}
	return 0
}

type SettlementCostsConfig struct {
	Town       *ResourceSet `protobuf:"bytes,1,opt,name=town,proto3" json:"town,omitempty"`
	City       *ResourceSet `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Capital    *ResourceSet `protobuf:"bytes,3,opt,name=capital,proto3" json:"capital,omitempty"`
	Farm       *ResourceSet `protobuf:"bytes,4,opt,name=farm,proto3" json:"farm,omitempty"`
	Lumbermill *ResourceSet `protobuf:"bytes,5,opt,name=lumbermill,proto3" json:"lumbermill,omitempty"`
	Quarry     *ResourceSet `protobuf:"bytes,6,opt,name=quarry,proto3" json:"quarry,omitempty"`
	Rook       *ResourceSet `protobuf:"bytes,7,opt,name=rook,proto3" json:"rook,omitempty"`
}

func (m *SettlementCostsConfig) Reset()         { *m = SettlementCostsConfig{} }
func (m *SettlementCostsConfig) String() string { return proto.CompactTextString(m) }
func (*SettlementCostsConfig) ProtoMessage()    {}
func (*SettlementCostsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd723d25700bbf6, []int{3}
}
func (m *SettlementCostsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettlementCostsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettlementCostsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettlementCostsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementCostsConfig.Merge(m, src)
}
func (m *SettlementCostsConfig) XXX_Size() int {
	return m.Size()
}
func (m *SettlementCostsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementCostsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementCostsConfig proto.InternalMessageInfo

func (m *SettlementCostsConfig) GetTown() *ResourceSet {
	if m != nil {
		return m.Town
	}
	return nil
}

func (m *SettlementCostsConfig) GetCity() *ResourceSet {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *SettlementCostsConfig) GetCapital() *ResourceSet {
	if m != nil {
		return m.Capital
	}
	return nil
}

func (m *SettlementCostsConfig) GetFarm() *ResourceSet {
	if m != nil {
		return m.Farm
	}
	return nil
}

func (m *SettlementCostsConfig) GetLumbermill() *ResourceSet {
	if m != nil {
		return m.Lumbermill
	}
	return nil
}

func (m *SettlementCostsConfig) GetQuarry() *ResourceSet {
	if m != nil {
		return m.Quarry
	}
	return nil
}

func (m *SettlementCostsConfig) GetRook() *ResourceSet {
	if m != nil {
		return m.Rook
	}
	return nil
}

type InitializationConfig struct {
	Teams      uint32       `protobuf:"varint,1,opt,name=teams,proto3" json:"teams,omitempty"`
	Resources  *ResourceSet `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Population uint32       `protobuf:"varint,3,opt,name=population,proto3" json:"population,omitempty"`
}

func (m *InitializationConfig) Reset()         { *m = InitializationConfig{} }
func (m *InitializationConfig) String() string { return proto.CompactTextString(m) }
func (*InitializationConfig) ProtoMessage()    {}
func (*InitializationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd723d25700bbf6, []int{4}
}
func (m *InitializationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitializationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitializationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitializationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializationConfig.Merge(m, src)
}
func (m *InitializationConfig) XXX_Size() int {
	return m.Size()
}
func (m *InitializationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InitializationConfig proto.InternalMessageInfo

func (m *InitializationConfig) GetTeams() uint32 {
	if m != nil {
		return m.Teams
	}
	return 0
}

func (m *InitializationConfig) GetResources() *ResourceSet {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *InitializationConfig) GetPopulation() uint32 {
	if m != nil {
		return m.Population
	}
	return 0
}

func init() {
	proto.RegisterType((*GameConfig)(nil), "rook.rook.GameConfig")
	proto.RegisterType((*MapConfig)(nil), "rook.rook.MapConfig")
	proto.RegisterType((*ProductionRatesConfig)(nil), "rook.rook.ProductionRatesConfig")
	proto.RegisterType((*SettlementCostsConfig)(nil), "rook.rook.SettlementCostsConfig")
	proto.RegisterType((*InitializationConfig)(nil), "rook.rook.InitializationConfig")
}

func init() { proto.RegisterFile("rook/config.proto", fileDescriptor_3cd723d25700bbf6) }

var fileDescriptor_3cd723d25700bbf6 = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x9b, 0xbf, 0x2f, 0x37, 0xf5, 0x47, 0x3b, 0x4a, 0xab, 0x88, 0x85, 0x29, 0x96, 0x8a,
	0x50, 0x2a, 0x39, 0xa8, 0x20, 0x24, 0x56, 0x20, 0x5a, 0x09, 0x21, 0x81, 0x40, 0xce, 0x8e, 0x4d,
	0x34, 0x71, 0x26, 0xc9, 0xa8, 0xb6, 0xc7, 0xcc, 0x8c, 0x15, 0xca, 0x92, 0x2d, 0x1b, 0x1e, 0x88,
	0x07, 0x60, 0xd9, 0x25, 0x4b, 0x48, 0x1e, 0x82, 0x2d, 0x9a, 0xeb, 0x9f, 0x3a, 0x22, 0x84, 0x4d,
	0x32, 0x73, 0xef, 0x39, 0xc7, 0x67, 0x8e, 0xc7, 0x17, 0x0e, 0xa4, 0x10, 0x97, 0x83, 0x40, 0xc4,
	0x53, 0x3e, 0xf3, 0x12, 0x29, 0xb4, 0x20, 0x6d, 0x53, 0xf2, 0xcc, 0xcf, 0xed, 0x7d, 0xec, 0x2a,
	0x4d, 0x35, 0xcb, 0x9a, 0xee, 0x2f, 0x0b, 0xe0, 0x05, 0x8d, 0xd8, 0x39, 0x32, 0xc8, 0x13, 0x68,
	0xf1, 0x98, 0x6b, 0x4e, 0xc3, 0x9e, 0x75, 0x6c, 0xdd, 0xef, 0x9c, 0xdd, 0xf1, 0x4a, 0xb6, 0xf7,
	0x32, 0xeb, 0xf0, 0x8f, 0x54, 0x73, 0x11, 0x67, 0x0c, 0xbf, 0xc0, 0x93, 0x7b, 0x50, 0x8b, 0x68,
	0xd2, 0xdb, 0x45, 0x5a, 0xb7, 0x42, 0x7b, 0x4d, 0x93, 0x1c, 0x6b, 0x00, 0xe4, 0x19, 0x40, 0x22,
	0xc5, 0x24, 0x0d, 0x8c, 0x48, 0xaf, 0x86, 0xf0, 0xe3, 0x0a, 0xfc, 0x6d, 0xd9, 0xf4, 0xa9, 0x66,
	0x2a, 0xa7, 0x56, 0x38, 0xe4, 0x02, 0xf6, 0x02, 0x11, 0x2b, 0x2d, 0x73, 0x8d, 0xfa, 0x1f, 0x1a,
	0x43, 0xa6, 0x75, 0xc8, 0x22, 0x16, 0xeb, 0x73, 0xa1, 0x74, 0xa1, 0xb1, 0xc6, 0x72, 0xbf, 0xee,
	0x42, 0xbb, 0xb4, 0x46, 0xba, 0xd0, 0x58, 0xf0, 0x89, 0x9e, 0xe3, 0xb1, 0x6d, 0x3f, 0xdb, 0x90,
	0x23, 0x68, 0xce, 0x19, 0x9f, 0xcd, 0x35, 0x1e, 0xcb, 0xf6, 0xf3, 0x1d, 0x21, 0x50, 0x57, 0x8c,
	0x4d, 0xd0, 0x7d, 0xcd, 0xc7, 0x35, 0x39, 0x85, 0x83, 0x48, 0xa4, 0xb1, 0xa6, 0x3c, 0x56, 0xa3,
	0x09, 0x8b, 0x15, 0xd7, 0x57, 0x68, 0xcd, 0xf6, 0xf7, 0xcb, 0xc6, 0x45, 0x56, 0x27, 0x27, 0xf0,
	0xff, 0x54, 0x48, 0xa6, 0x74, 0x89, 0x6c, 0x20, 0xd2, 0xce, 0xaa, 0x05, 0xec, 0x2e, 0xec, 0x85,
	0xf4, 0x92, 0x95, 0xa0, 0x26, 0x82, 0x3a, 0xa6, 0x56, 0x51, 0x4a, 0xc2, 0xb5, 0x67, 0xb6, 0x32,
	0xa5, 0xac, 0x5a, 0xc0, 0x5c, 0xb0, 0x43, 0x1e, 0xb3, 0x91, 0x98, 0x8e, 0x14, 0x1e, 0xe8, 0xbf,
	0x5c, 0x8a, 0xc7, 0xec, 0xcd, 0x74, 0x88, 0xa7, 0x3a, 0x05, 0x62, 0xd2, 0x1b, 0xad, 0x03, 0xdb,
	0x08, 0xbc, 0x65, 0x3a, 0xaf, 0x6e, 0xc0, 0xee, 0x67, 0x0b, 0x0e, 0x37, 0xbe, 0x2a, 0x13, 0x8e,
	0x16, 0x8b, 0x38, 0x4f, 0x12, 0xd7, 0xa6, 0x16, 0x18, 0x6f, 0x59, 0x8c, 0xb8, 0x26, 0x0e, 0x40,
	0x98, 0x46, 0x63, 0x26, 0x23, 0x1e, 0x86, 0x18, 0xa5, 0xed, 0x57, 0x2a, 0x26, 0xfc, 0xf7, 0x29,
	0x95, 0xb2, 0x48, 0x31, 0xdf, 0x19, 0xad, 0x29, 0x95, 0x51, 0x9e, 0x18, 0xae, 0xdd, 0x9f, 0xbb,
	0x70, 0xb8, 0xf1, 0xa5, 0x93, 0x7e, 0xc5, 0x4d, 0xe7, 0xec, 0xa8, 0x72, 0x49, 0x7c, 0xa6, 0x44,
	0x2a, 0x03, 0x36, 0x64, 0x3a, 0x77, 0xd9, 0xaf, 0xb8, 0xdc, 0x82, 0x45, 0xf7, 0x0f, 0xa0, 0x15,
	0xd0, 0x84, 0x6b, 0x1a, 0xe6, 0x77, 0xf8, 0x6f, 0xf0, 0x02, 0x66, 0xd4, 0xd1, 0x77, 0x7d, 0xbb,
	0xba, 0xc1, 0x90, 0xc7, 0x6b, 0xd9, 0x34, 0xb6, 0x32, 0xaa, 0x99, 0x79, 0x65, 0x66, 0xcd, 0xad,
	0x9c, 0x22, 0xcb, 0x3e, 0xd4, 0x4d, 0x0f, 0xef, 0xcc, 0x16, 0x4f, 0xa6, 0xe2, 0x7e, 0xb2, 0xa0,
	0xbb, 0x69, 0x04, 0x98, 0x6f, 0x47, 0x33, 0x1a, 0xa9, 0xe2, 0xdb, 0xc1, 0x0d, 0x79, 0x04, 0x6d,
	0x99, 0x6b, 0xa8, 0x7f, 0x24, 0x7a, 0x03, 0x34, 0x97, 0x22, 0x11, 0x49, 0x1a, 0xd2, 0x72, 0x3a,
	0xd8, 0x7e, 0xa5, 0xf2, 0xfc, 0xe9, 0xb7, 0xa5, 0x63, 0x5d, 0x2f, 0x1d, 0xeb, 0xc7, 0xd2, 0xb1,
	0xbe, 0xac, 0x9c, 0x9d, 0xeb, 0x95, 0xb3, 0xf3, 0x7d, 0xe5, 0xec, 0xbc, 0x3b, 0x99, 0x71, 0x3d,
	0x4f, 0xc7, 0x5e, 0x20, 0xa2, 0x41, 0x10, 0x2d, 0xa8, 0x66, 0x52, 0x0d, 0x70, 0xde, 0x7d, 0xc8,
	0xfe, 0xf4, 0x55, 0xc2, 0xd4, 0xb8, 0x89, 0x73, 0xef, 0xe1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd3, 0xf2, 0x43, 0xcf, 0x29, 0x05, 0x00, 0x00,
}

func (m *GameConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Construction != nil {
		{
			size, err := m.Construction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Production != nil {
		{
			size, err := m.Production.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Initial != nil {
		{
			size, err := m.Initial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RookLineOfSight != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.RookLineOfSight))
		i--
		dAtA[i] = 0x48
	}
	if m.LineOfSight != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.LineOfSight))
		i--
		dAtA[i] = 0x40
	}
	if m.PlainsDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.PlainsDensity))
		i--
		dAtA[i] = 0x38
	}
	if m.LakeDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.LakeDensity))
		i--
		dAtA[i] = 0x30
	}
	if m.ForestDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ForestDensity))
		i--
		dAtA[i] = 0x28
	}
	if m.MountainsDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MountainsDensity))
		i--
		dAtA[i] = 0x20
	}
	if m.Seed != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Seed))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProductionRatesConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductionRatesConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductionRatesConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Farm != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Farm))
		i--
		dAtA[i] = 0x28
	}
	if m.Quarry != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Quarry))
		i--
		dAtA[i] = 0x20
	}
	if m.Lumbermill != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Lumbermill))
		i--
		dAtA[i] = 0x18
	}
	if m.City != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.City))
		i--
		dAtA[i] = 0x10
	}
	if m.Town != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Town))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SettlementCostsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettlementCostsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettlementCostsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rook != nil {
		{
			size, err := m.Rook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Quarry != nil {
		{
			size, err := m.Quarry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Lumbermill != nil {
		{
			size, err := m.Lumbermill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Farm != nil {
		{
			size, err := m.Farm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Capital != nil {
		{
			size, err := m.Capital.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.City != nil {
		{
			size, err := m.City.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Town != nil {
		{
			size, err := m.Town.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitializationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitializationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Population != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Population))
		i--
		dAtA[i] = 0x18
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Teams != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Teams))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Initial != nil {
		l = m.Initial.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Production != nil {
		l = m.Production.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Construction != nil {
		l = m.Construction.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *MapConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovConfig(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovConfig(uint64(m.Height))
	}
	if m.Seed != 0 {
		n += 1 + sovConfig(uint64(m.Seed))
	}
	if m.MountainsDensity != 0 {
		n += 1 + sovConfig(uint64(m.MountainsDensity))
	}
	if m.ForestDensity != 0 {
		n += 1 + sovConfig(uint64(m.ForestDensity))
	}
	if m.LakeDensity != 0 {
		n += 1 + sovConfig(uint64(m.LakeDensity))
	}
	if m.PlainsDensity != 0 {
		n += 1 + sovConfig(uint64(m.PlainsDensity))
	}
	if m.LineOfSight != 0 {
		n += 1 + sovConfig(uint64(m.LineOfSight))
	}
	if m.RookLineOfSight != 0 {
		n += 1 + sovConfig(uint64(m.RookLineOfSight))
	}
	return n
}

func (m *ProductionRatesConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Town != 0 {
		n += 1 + sovConfig(uint64(m.Town))
	}
	if m.City != 0 {
		n += 1 + sovConfig(uint64(m.City))
	}
	if m.Lumbermill != 0 {
		n += 1 + sovConfig(uint64(m.Lumbermill))
	}
	if m.Quarry != 0 {
		n += 1 + sovConfig(uint64(m.Quarry))
	}
	if m.Farm != 0 {
		n += 1 + sovConfig(uint64(m.Farm))
	}
	return n
}

func (m *SettlementCostsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Town != nil {
		l = m.Town.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.City != nil {
		l = m.City.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Capital != nil {
		l = m.Capital.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Farm != nil {
		l = m.Farm.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Lumbermill != nil {
		l = m.Lumbermill.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Quarry != nil {
		l = m.Quarry.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Rook != nil {
		l = m.Rook.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *InitializationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Teams != 0 {
		n += 1 + sovConfig(uint64(m.Teams))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Population != 0 {
		n += 1 + sovConfig(uint64(m.Population))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Initial == nil {
				m.Initial = &InitializationConfig{}
			}
			if err := m.Initial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &MapConfig{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Production", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Production == nil {
				m.Production = &ProductionRatesConfig{}
			}
			if err := m.Production.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Construction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Construction == nil {
				m.Construction = &SettlementCostsConfig{}
			}
			if err := m.Construction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountainsDensity", wireType)
			}
			m.MountainsDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MountainsDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForestDensity", wireType)
			}
			m.ForestDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForestDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LakeDensity", wireType)
			}
			m.LakeDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LakeDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainsDensity", wireType)
			}
			m.PlainsDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlainsDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineOfSight", wireType)
			}
			m.LineOfSight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineOfSight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RookLineOfSight", wireType)
			}
			m.RookLineOfSight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RookLineOfSight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductionRatesConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductionRatesConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductionRatesConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Town", wireType)
			}
			m.Town = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Town |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			m.City = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.City |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lumbermill", wireType)
			}
			m.Lumbermill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lumbermill |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quarry", wireType)
			}
			m.Quarry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quarry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farm", wireType)
			}
			m.Farm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Farm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettlementCostsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettlementCostsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettlementCostsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Town", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Town == nil {
				m.Town = &ResourceSet{}
			}
			if err := m.Town.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.City == nil {
				m.City = &ResourceSet{}
			}
			if err := m.City.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capital", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capital == nil {
				m.Capital = &ResourceSet{}
			}
			if err := m.Capital.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Farm == nil {
				m.Farm = &ResourceSet{}
			}
			if err := m.Farm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lumbermill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lumbermill == nil {
				m.Lumbermill = &ResourceSet{}
			}
			if err := m.Lumbermill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quarry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quarry == nil {
				m.Quarry = &ResourceSet{}
			}
			if err := m.Quarry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rook == nil {
				m.Rook = &ResourceSet{}
			}
			if err := m.Rook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			m.Teams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teams |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &ResourceSet{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Population", wireType)
			}
			m.Population = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Population |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
