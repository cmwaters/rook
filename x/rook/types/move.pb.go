// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rook/move.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Direction int32

const (
	Direction_D_UNKNOWN Direction = 0
	Direction_DOWN      Direction = 1
	Direction_LEFT      Direction = 2
	Direction_RIGHT     Direction = 3
	Direction_UP        Direction = 4
)

var Direction_name = map[int32]string{
	0: "D_UNKNOWN",
	1: "DOWN",
	2: "LEFT",
	3: "RIGHT",
	4: "UP",
}

var Direction_value = map[string]int32{
	"D_UNKNOWN": 0,
	"DOWN":      1,
	"LEFT":      2,
	"RIGHT":     3,
	"UP":        4,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b0a263a240894b1, []int{0}
}

type MsgMove struct {
	Id        string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Quantity  uint32                                        `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Position  *Position                                     `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Direction Direction                                     `protobuf:"varint,5,opt,name=direction,proto3,enum=rook.rook.Direction" json:"direction,omitempty"`
}

func (m *MsgMove) Reset()         { *m = MsgMove{} }
func (m *MsgMove) String() string { return proto.CompactTextString(m) }
func (*MsgMove) ProtoMessage()    {}
func (*MsgMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b0a263a240894b1, []int{0}
}
func (m *MsgMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMove.Merge(m, src)
}
func (m *MsgMove) XXX_Size() int {
	return m.Size()
}
func (m *MsgMove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMove proto.InternalMessageInfo

func (m *MsgMove) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgMove) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgMove) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *MsgMove) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *MsgMove) GetDirection() Direction {
	if m != nil {
		return m.Direction
	}
	return Direction_D_UNKNOWN
}

type Position struct {
	X uint32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b0a263a240894b1, []int{1}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetX() uint32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Position) GetY() uint32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterEnum("rook.rook.Direction", Direction_name, Direction_value)
	proto.RegisterType((*MsgMove)(nil), "rook.rook.MsgMove")
	proto.RegisterType((*Position)(nil), "rook.rook.Position")
}

func init() { proto.RegisterFile("rook/move.proto", fileDescriptor_4b0a263a240894b1) }

var fileDescriptor_4b0a263a240894b1 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xee, 0x96, 0xbf, 0x76, 0xa5, 0xd8, 0xac, 0x1c, 0x1a, 0x0e, 0xb5, 0x21, 0xd1, 0x34, 0x26,
	0xb4, 0x11, 0x1f, 0xc0, 0x40, 0xf0, 0x2f, 0x08, 0x92, 0x0d, 0xc4, 0xc4, 0x8b, 0x81, 0xb6, 0xa9,
	0x0d, 0x29, 0x8b, 0xdd, 0x05, 0xe9, 0x5b, 0xf8, 0x58, 0x1e, 0x39, 0x7a, 0x32, 0x06, 0x0e, 0xbe,
	0x83, 0x27, 0xd3, 0x05, 0x2a, 0x97, 0x9d, 0x6f, 0x66, 0xbe, 0x6f, 0xb2, 0x33, 0x1f, 0x3c, 0x8c,
	0x08, 0x19, 0xdb, 0x21, 0x99, 0x7b, 0xd6, 0x34, 0x22, 0x8c, 0x20, 0x39, 0x29, 0x58, 0xc9, 0x53,
	0x29, 0xfb, 0xc4, 0x27, 0xbc, 0x6a, 0x27, 0x68, 0x43, 0xa8, 0xfe, 0x00, 0x58, 0xe8, 0x50, 0xbf,
	0x43, 0xe6, 0x1e, 0x2a, 0x41, 0x31, 0x70, 0x35, 0x60, 0x00, 0x53, 0xc6, 0x62, 0xe0, 0xa2, 0x36,
	0x2c, 0x38, 0x91, 0x37, 0x64, 0x24, 0xd2, 0x44, 0x03, 0x98, 0xc5, 0xe6, 0xf9, 0xef, 0xd7, 0x71,
	0xcd, 0x0f, 0xd8, 0xcb, 0x6c, 0x64, 0x39, 0x24, 0xb4, 0x1d, 0x42, 0x43, 0x42, 0xb7, 0xa1, 0x46,
	0xdd, 0xb1, 0xcd, 0xe2, 0xa9, 0x47, 0xad, 0x86, 0xe3, 0x34, 0x5c, 0x37, 0xf2, 0x28, 0xc5, 0xbb,
	0x09, 0xa8, 0x02, 0xa5, 0xd7, 0xd9, 0x70, 0xc2, 0x02, 0x16, 0x6b, 0x19, 0x03, 0x98, 0x0a, 0x4e,
	0x73, 0x64, 0x43, 0x69, 0x4a, 0x68, 0xc0, 0x02, 0x32, 0xd1, 0xb2, 0x06, 0x30, 0x0f, 0xea, 0x47,
	0x56, 0xfa, 0x71, 0xab, 0xb7, 0x6d, 0xe1, 0x94, 0x84, 0xea, 0x50, 0x76, 0x83, 0xc8, 0x73, 0xb8,
	0x22, 0x67, 0x00, 0xb3, 0x54, 0x2f, 0xef, 0x29, 0x5a, 0xbb, 0x1e, 0xfe, 0xa7, 0x55, 0x4f, 0xa1,
	0xb4, 0x9b, 0x84, 0x8a, 0x10, 0x2c, 0xf8, 0xa2, 0x0a, 0x06, 0x8b, 0x24, 0x8b, 0xf9, 0x86, 0x0a,
	0x06, 0xf1, 0x59, 0x03, 0xca, 0xa9, 0x1e, 0x29, 0x50, 0x6e, 0x3d, 0x0f, 0xba, 0xed, 0xee, 0xc3,
	0x63, 0x57, 0x15, 0x90, 0x04, 0xb3, 0xad, 0x04, 0x81, 0x04, 0xdd, 0x5f, 0x5d, 0xf7, 0x55, 0x11,
	0xc9, 0x30, 0x87, 0xef, 0x6e, 0x6e, 0xfb, 0x6a, 0x06, 0xe5, 0xa1, 0x38, 0xe8, 0xa9, 0xd9, 0xe6,
	0xe5, 0xc7, 0x4a, 0x07, 0xcb, 0x95, 0x0e, 0xbe, 0x57, 0x3a, 0x78, 0x5f, 0xeb, 0xc2, 0x72, 0xad,
	0x0b, 0x9f, 0x6b, 0x5d, 0x78, 0x3a, 0xd9, 0xbf, 0x5e, 0xf8, 0x36, 0x64, 0x5e, 0x44, 0x6d, 0x6e,
	0xda, 0x62, 0x13, 0xf8, 0x01, 0x47, 0x79, 0x6e, 0xce, 0xc5, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x7d, 0x72, 0x5e, 0x00, 0xd0, 0x01, 0x00, 0x00,
}

func (m *MsgMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintMove(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x28
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMove(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Quantity != 0 {
		i = encodeVarintMove(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMove(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMove(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintMove(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintMove(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMove(dAtA []byte, offset int, v uint64) int {
	offset -= sovMove(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMove(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMove(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovMove(uint64(m.Quantity))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovMove(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovMove(uint64(m.Direction))
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovMove(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovMove(uint64(m.Y))
	}
	return n
}

func sovMove(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMove(x uint64) (n int) {
	return sovMove(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMove
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMove
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMove
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMove
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMove
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMove
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMove(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMove
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMove
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMove(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMove
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMove
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMove
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMove
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMove
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMove
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMove        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMove          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMove = fmt.Errorf("proto: unexpected end of group")
)
